//
//  AlViewRelativeLayout.cpp
//  MyUIView
//
//  Created by Li Kai on 13-3-28.
//  Copyright (c) 2013å¹´ DomQiu. All rights reserved.
//

#include <stdlib.h>
#include "AlViewRelativeLayout.h"

void AlViewRelativeLayout::setLayoutRelation (int leftOperandID, int rightOperandID, int layoutRelation)
{
    LayoutConstraint lc;
    lc.leftOperandID = leftOperandID;
    lc.rightOperandID = rightOperandID;
    lc.relation = layoutRelation;
    interpretLayoutConstraint(lc);
}

void AlViewRelativeLayout::interpretLayoutConstraint (LayoutConstraint originalLC)
{
    LayoutConstraint lc = originalLC;
    lc.leftOperandID <<= 3;
    lc.rightOperandID <<= 3;
    lc.constant = 0;

    switch (originalLC.relation)
    {
        case kLayoutRelationAbove:
            // L.Bottom >= R.Top
            lc.leftOperandID |= VAR_BOTTOM;
            lc.rightOperandID |= VAR_TOP;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Bottom <= R.Top
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // R.Top <= L.Bottom
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Top >= L.Bottom
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
        case kLayoutRelationBelow:
            // R.Bottom <= L.Top
            lc.rightOperandID |= VAR_BOTTOM;
            lc.leftOperandID |= VAR_TOP;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // R.Bottom >= L.Top
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // L.Top >= R.Bottom
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // L.Top <= R.Bottom
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;///
        case kLayoutRelationToLeftOf:
            // L.Right >= R.Left
            lc.leftOperandID |= VAR_RIGHT;
            lc.rightOperandID |= VAR_LEFT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Right <= R.Left
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // R.Left <= L.Right
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Left >= L.Right
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
        case kLayoutRelationToRightOf:
            // R.Right <= L.Left
            lc.rightOperandID |= VAR_RIGHT;
            lc.leftOperandID |= VAR_LEFT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // R.Right >= L.Left
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // L.Left >= R.Right
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // L.Left <= R.Right
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignTopWith:
            // L.Top >= R.Top
            lc.leftOperandID |= VAR_TOP;
            lc.rightOperandID |= VAR_TOP;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Top <= R.Top
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // R.Top <= L.Top
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Top >= L.Top
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
            
        case kLayoutRelationAlignBottomWith:
            // L.Bottom >= R.Bottom
            lc.leftOperandID |= VAR_BOTTOM;
            lc.rightOperandID |= VAR_BOTTOM;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Bottom <= R.Bottom
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // R.Bottom <= L.Bottom
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Bottom >= L.Bottom
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignLeftWith:
            // L.Left >= R.Left
            lc.leftOperandID |= VAR_LEFT;
            lc.rightOperandID |= VAR_LEFT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Left <= R.Left
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // R.Left <= L.Left
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Left >= L.Left
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignRightWith:
            // L.Right >= R.Right
            lc.leftOperandID |= VAR_RIGHT;
            lc.rightOperandID |= VAR_RIGHT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Right <= R.Right
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
            
            // R.Right <= L.Right
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Right >= L.Right
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            break;
            
        case kLayoutRelationAlignParentLeft:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_LEFT;
            suspendingConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignParentRight:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_RIGHT;
            suspendingConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignParentTop:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_TOP;
            suspendingConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignParentBottom:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_BOTTOM;
            suspendingConstraints.push_back(lc);
            
            break;
            
    }
}

void AlViewRelativeLayout::interpretLayoutConstraint (list<LayoutConstraint>* reinterpretedConstraints, LayoutConstraint originalLC, CGSize bound)
{
    LayoutConstraint lc = originalLC;
    switch (lc.relation)
    {
        case kLayoutRelationAlignParentLeft:
            lc.constant = 0;
            
            // L.Left <= 0
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
            
            // L.Left >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            break;
        case kLayoutRelationAlignParentRight:
            lc.constant = bound.width;
            
            // L.Right <= 0
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
            
            // L.Right >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            break;
        case kLayoutRelationAlignParentTop:
            lc.constant = 0;
            
            // L.Top <= 0
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
            
            // L.Top >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            break;
        case kLayoutRelationAlignParentBottom:
            lc.constant = bound.height;
            
            // L.Bottom <= HEIGHT
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
            
            // L.Bottom >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            break;
            
        case kLayoutRelationSetSelfBound:
            int shiftID = lc.leftOperandID << 3;
            
            // L.Left <= R.Right - Width
            lc.leftOperandID = shiftID | VAR_LEFT;
            lc.rightOperandID = shiftID | VAR_RIGHT;
            lc.constant = -bound.width;
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
            
            // L.Right >= R.Left + Width
            lc.leftOperandID = shiftID | VAR_RIGHT;
            lc.rightOperandID = shiftID | VAR_LEFT;
            lc.constant = bound.width;
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            // L.Top <= R.Bottom - Height
            lc.leftOperandID = shiftID | VAR_TOP;
            lc.rightOperandID = shiftID | VAR_BOTTOM;
            lc.constant = -bound.height;
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
            
            // L.Bottom >= R.Top + Height
            lc.leftOperandID = shiftID | VAR_BOTTOM;
            lc.rightOperandID = shiftID | VAR_TOP;
            lc.constant = bound.height;
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            break;
    }
}

void AlViewRelativeLayout::onMeasure (AlViewLayoutParameter givenLayoutParam)
{
    CGSize myBound = givenLayoutParam.givenSize;
    
    list<LayoutConstraint> constraints;
    constraints.splice(constraints.end(), interpretedConstraints);
    
    LayoutConstraint lc;
    lc.relation = kLayoutRelationSetSelfBound;
    
    for (map<int, ChildPair>::iterator iter = children.begin(); iter != children.end(); iter++)
    {
        ChildPair cp = iter->second;
        cp.child->onMeasure(cp.parameter);
        lc.leftOperandID = iter->first;
        interpretLayoutConstraint(&constraints, lc, cp.child->getMinimalMeasuredSize());
    }
    
    for (list<LayoutConstraint>::iterator iter = suspendingConstraints.begin(); iter != suspendingConstraints.end(); iter++)
    {
        interpretLayoutConstraint(&constraints, *iter, myBound);
    }
    
    /////
    int vars = children.size() * 6;
    int* ranges[2];
    ranges[0] = (int*) malloc(sizeof(int) * vars);
    ranges[1] = (int*) malloc(sizeof(int) * vars);
    for (int i=0; i<2; i++)
    for (int j=0; j<vars; j++)
    {
        ranges[i][j] = NA_RANGE;
    }
    
    // Every iteration, select one certain condition to update each related condition. Iter until no changes are made and no certain conditions exist :
    bool isAnythingChanged;
    do
    {
        isAnythingChanged = false;
        
        // Iter in constraints :
        int rangeBound;
        int rangeValue;
        for (list<LayoutConstraint>::iterator iter = constraints.begin(); iter != constraints.end(); iter++)
        {
            rangeBound = 1 - iter->relation;
            if (NA_VAR != iter->rightOperandID)
            {
                rangeValue = ranges[rangeBound][iter->rightOperandID];
                if (NA_RANGE == rangeValue) continue;
                
                rangeValue += iter->constant;
            }
            else
            {
                rangeValue = iter->constant;
            }
            
            if (NA_RANGE == ranges[rangeBound][iter->leftOperandID] ||
                (1 == rangeBound && rangeValue < ranges[1][iter->leftOperandID]) ||
                (0 == rangeBound && rangeValue > ranges[0][iter->leftOperandID]))
            {
                ranges[rangeBound][iter->leftOperandID] = rangeValue;
                isAnythingChanged = true;
            }
        }
    }
    while (isAnythingChanged);
    
    // A:0, B:8, C:16
    printf("A.Top : [%d, %d]\n", ranges[0][1], ranges[1][1]);
    printf("A.Bottom : [%d, %d]\n", ranges[0][3], ranges[1][3]);
    printf("B.Top : [%d, %d]\n", ranges[0][9], ranges[1][9]);
    printf("B.Bottom : [%d, %d]\n", ranges[0][11], ranges[1][11]);
    
    printf("A.Left : [%d, %d]\n", ranges[0][0], ranges[1][0]);
    printf("A.Right : [%d, %d]\n", ranges[0][2], ranges[1][2]);
    printf("B.Left : [%d, %d]\n", ranges[0][8], ranges[1][8]);
    printf("B.Right : [%d, %d]\n", ranges[0][10], ranges[1][10]);
    
    free(ranges[0]);
    free(ranges[1]);
}
