//
//  AlViewRelativeLayout.cpp
//  MyUIView
//
//  Created by Li Kai on 13-3-28.
//  Copyright (c) 2013å¹´ DomQiu. All rights reserved.
//

#define HALF_CONSTRAINTS

#include <stdlib.h>
#include "AlViewRelativeLayout.h"

void AlViewRelativeLayout::setLayoutRelation (int leftOperandID, int rightOperandID, int layoutRelation)
{
    LayoutConstraint lc;
    lc.leftOperandID = leftOperandID;
    lc.rightOperandID = rightOperandID;
    lc.relation = layoutRelation;
    interpretLayoutConstraint(lc);
}

void AlViewRelativeLayout::interpretLayoutConstraint (LayoutConstraint originalLC)
{
    LayoutConstraint lc = originalLC;
    lc.leftOperandID <<= 3;
    lc.rightOperandID <<= 3;
    lc.constant = 0;

    switch (originalLC.relation)
    {
        case kLayoutRelationAbove:
            // L.Bottom >= R.Top
            lc.leftOperandID |= VAR_BOTTOM;
            lc.rightOperandID |= VAR_TOP;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Bottom <= R.Top
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // R.Top <= L.Bottom
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Top >= L.Bottom
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
        case kLayoutRelationBelow:
            // R.Bottom <= L.Top
            lc.rightOperandID |= VAR_BOTTOM;
            lc.leftOperandID |= VAR_TOP;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // R.Bottom >= L.Top
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // L.Top >= R.Bottom
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // L.Top <= R.Bottom
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;///
        case kLayoutRelationToLeftOf:
            // L.Right >= R.Left
            lc.leftOperandID |= VAR_RIGHT;
            lc.rightOperandID |= VAR_LEFT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Right <= R.Left
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // R.Left <= L.Right
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Left >= L.Right
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
        case kLayoutRelationToRightOf:
            // R.Right <= L.Left
            lc.rightOperandID |= VAR_RIGHT;
            lc.leftOperandID |= VAR_LEFT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // R.Right >= L.Left
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // L.Left >= R.Right
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // L.Left <= R.Right
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
        case kLayoutRelationAlignTopWith:
            // L.Top >= R.Top
            lc.leftOperandID |= VAR_TOP;
            lc.rightOperandID |= VAR_TOP;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Top <= R.Top
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // R.Top <= L.Top
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Top >= L.Top
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
            
        case kLayoutRelationAlignBottomWith:
            // L.Bottom >= R.Bottom
            lc.leftOperandID |= VAR_BOTTOM;
            lc.rightOperandID |= VAR_BOTTOM;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Bottom <= R.Bottom
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // R.Bottom <= L.Bottom
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Bottom >= L.Bottom
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
        case kLayoutRelationAlignLeftWith:
            // L.Left >= R.Left
            lc.leftOperandID |= VAR_LEFT;
            lc.rightOperandID |= VAR_LEFT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Left <= R.Left
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // R.Left <= L.Left
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Left >= L.Left
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
        case kLayoutRelationAlignRightWith:
            // L.Right >= R.Right
            lc.leftOperandID |= VAR_RIGHT;
            lc.rightOperandID |= VAR_RIGHT;
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
            
            // L.Right <= R.Right
            lc.relation = 0;
            interpretedConstraints.push_back(lc);
#ifndef HALF_CONSTRAINTS
            // R.Right <= L.Right
            lc.leftOperandID ^= lc.rightOperandID;
            lc.rightOperandID ^= lc.leftOperandID;
            lc.leftOperandID ^= lc.rightOperandID;
            interpretedConstraints.push_back(lc);
            
            // R.Right >= L.Right
            lc.relation = 1;
            interpretedConstraints.push_back(lc);
#endif
            break;
            
        case kLayoutRelationAlignParentLeft:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_LEFT;
            suspendingConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignParentRight:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_RIGHT;
            suspendingConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignParentTop:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_TOP;
            suspendingConstraints.push_back(lc);
            
            break;
        case kLayoutRelationAlignParentBottom:
            lc.rightOperandID = NA_VAR;
            lc.leftOperandID |= VAR_BOTTOM;
            suspendingConstraints.push_back(lc);
            
            break;
            
    }
}


void AlViewRelativeLayout::interpretLayoutConstraint (list<LayoutConstraint>* reinterpretedConstraints, LayoutConstraint originalLC, CGSize bound)
{
    LayoutConstraint lc = originalLC;
    switch (lc.relation)
    {
        case kLayoutRelationAlignParentLeft:
            lc.constant = 0;

            // L.Left <= 0
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);

            // L.Left >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
            
            break;
        case kLayoutRelationAlignParentRight:
            lc.constant = bound.width;

            // L.Right <= 0
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);

            // L.Right >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);

            break;
        case kLayoutRelationAlignParentTop:
            lc.constant = 0;

            // L.Top <= 0
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);

            // L.Top >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);

            break;
        case kLayoutRelationAlignParentBottom:
            lc.constant = bound.height;
            
            // L.Bottom <= HEIGHT
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);

            // L.Bottom >= 0
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);

            break;
            
        case kLayoutRelationSetSelfBound:
            int shiftID = lc.leftOperandID << 3;
            
            // L.Left <= R.Right - Width
            lc.leftOperandID = shiftID | VAR_LEFT;
            lc.rightOperandID = shiftID | VAR_RIGHT;
            lc.constant = -bound.width;
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
#ifndef HALF_CONSTRAINTS
            // L.Right >= R.Left + Width
            lc.leftOperandID = shiftID | VAR_RIGHT;
            lc.rightOperandID = shiftID | VAR_LEFT;
            lc.constant = bound.width;
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
#endif
            // L.Top <= R.Bottom - Height
            lc.leftOperandID = shiftID | VAR_TOP;
            lc.rightOperandID = shiftID | VAR_BOTTOM;
            lc.constant = -bound.height;
            lc.relation = 0;
            reinterpretedConstraints->push_back(lc);
#ifndef HALF_CONSTRAINTS
            // L.Bottom >= R.Top + Height
            lc.leftOperandID = shiftID | VAR_BOTTOM;
            lc.rightOperandID = shiftID | VAR_TOP;
            lc.constant = bound.height;
            lc.relation = 1;
            reinterpretedConstraints->push_back(lc);
#endif
            break;
    }
}

void AlViewRelativeLayout::onMeasure (AlViewLayoutParameter givenLayoutParam)
{
    CGSize myBound = givenLayoutParam.givenSize;
    
    list<LayoutConstraint> constraints;
    constraints.splice(constraints.end(), interpretedConstraints);
    
    LayoutConstraint lc;
    lc.relation = kLayoutRelationSetSelfBound;
    
    for (map<int, ChildPair>::iterator iter = children.begin(); iter != children.end(); iter++)
    {
        ChildPair cp = iter->second;
        cp.child->onMeasure(cp.parameter);
        lc.leftOperandID = iter->first;
        interpretLayoutConstraint(&constraints, lc, cp.child->getMinimalMeasuredSize());
    }
    
    for (list<LayoutConstraint>::iterator iter = suspendingConstraints.begin(); iter != suspendingConstraints.end(); iter++)
    {
        interpretLayoutConstraint(&constraints, *iter, myBound);
    }
    
    /*
    int vars = children.size() * 6;
    int* ranges[2];
    ranges[0] = (int*) malloc(sizeof(int) * vars);
    ranges[1] = (int*) malloc(sizeof(int) * vars);
    for (int i=0; i<2; i++)
    for (int j=0; j<vars; j++)
    {
        ranges[i][j] = NA_RANGE;
    }
    
    // Every iteration, select one certain condition to update each related condition. Iter until no changes are made and no certain conditions exist :
    bool isAnythingChanged;
    do
    {
        isAnythingChanged = false;
        
        // Iter in constraints :
        int rangeBound;
        int rangeValue;
        for (list<LayoutConstraint>::iterator iter = constraints.begin(); iter != constraints.end(); iter++)
        {
            rangeBound = 1 - iter->relation;
            if (NA_VAR != iter->rightOperandID)
            {
                rangeValue = ranges[rangeBound][iter->rightOperandID];
                if (NA_RANGE == rangeValue) continue;
                
                rangeValue += iter->constant;
            }
            else
            {
                rangeValue = iter->constant;
            }
            
            if (NA_RANGE == ranges[rangeBound][iter->leftOperandID] ||
                (1 == rangeBound && rangeValue < ranges[1][iter->leftOperandID]) ||
                (0 == rangeBound && rangeValue > ranges[0][iter->leftOperandID]))
            {
                ranges[rangeBound][iter->leftOperandID] = rangeValue;
                isAnythingChanged = true;
            }
        }
    }
    while (isAnythingChanged);

    // Decide each var's value:
    while (true)
    {
        int i = 0;
        for (i=0; i<vars; i++)
        {
            if (ranges[0][i] != NA_RANGE && ranges[1][i] != ranges[0][i])
            {
                ranges[1][i] = ranges[0][i];
                break;
            }
            else if (ranges[1][i] != NA_RANGE && ranges[0][i] != ranges[1][i])
            {
                ranges[0][i] = ranges[1][i];
                break;
            }
        }
        
        if (i < vars)
        {
            int rangeBound;
            int rangeValue;
            for (list<LayoutConstraint>::iterator iter = constraints.begin(); iter != constraints.end(); iter++)
            {
                if (i != iter->rightOperandID) continue;
                
                rangeBound = 1 - iter->relation;
                rangeValue = ranges[rangeBound][iter->rightOperandID] + iter->constant;
                
                if (NA_RANGE == ranges[rangeBound][iter->leftOperandID] ||
                    (1 == rangeBound && rangeValue < ranges[1][iter->leftOperandID]) ||
                    (0 == rangeBound && rangeValue > ranges[0][iter->leftOperandID]))
                {
                    ranges[rangeBound][iter->leftOperandID] = rangeValue;
                }
            }
        }
        else
        {
            break;
        }
    }

    for (map<int, ChildPair>::iterator iter = children.begin(); iter != children.end(); iter++)
    {
        ChildPair cp = iter->second;
        int id = iter->first << 3;
        
        int left = ranges[0][id | VAR_LEFT];
        int top = ranges[0][id | VAR_TOP];
        int width = ranges[0][id | VAR_RIGHT] - left;
        int height = ranges[0][id | VAR_BOTTOM] - top;
        cp.child->_layoutedRect = CGRectMake(left, top, width, height);
        cp.child->applyLayout();
    }
    
    // A:0, B:8, C:16
    printf("A.Top : [%d, %d]\n", ranges[0][1], ranges[1][1]);
    printf("A.Bottom : [%d, %d]\n", ranges[0][3], ranges[1][3]);
    printf("B.Top : [%d, %d]\n", ranges[0][9], ranges[1][9]);
    printf("B.Bottom : [%d, %d]\n", ranges[0][11], ranges[1][11]);
    
    printf("A.Left : [%d, %d]\n", ranges[0][0], ranges[1][0]);
    printf("A.Right : [%d, %d]\n", ranges[0][2], ranges[1][2]);
    printf("B.Left : [%d, %d]\n", ranges[0][8], ranges[1][8]);
    printf("B.Right : [%d, %d]\n", ranges[0][10], ranges[1][10]);
    
    free(ranges[0]);
    free(ranges[1]);
    /*/
    createRelationGraphs(relationGraphs, &constraints);
    solveRelationGraphs(relationGraphs);
    decideRelationGraphs(relationGraphs);
    
    for (map<int, RelationGraphNode*>::iterator iter = relationGraphs.begin(); iter != relationGraphs.end(); iter++)
    {
        RelationGraphNode* curNode = iter->second;
        printf("Node#%d : [%d, %d]\n", iter->first, curNode->rangeBounds[0], curNode->rangeBounds[1]);
    }
    //*/
    
    setMinimalMeasuredSize(givenLayoutParam.givenSize.width, givenLayoutParam.givenSize.height);
    setDesiredMeasuredSize(givenLayoutParam.givenSize.width, givenLayoutParam.givenSize.height);
    _layoutedRect = CGRectMake(0, 0, _minimalMeasuredSize.width, _minimalMeasuredSize.height);
}

void AlViewRelativeLayout::recursiveTraverseRelationGraph (RelationGraphNode* node, int direction,
                                     map<int, RelationGraphNode*>* graphs,
                                     void* param, CallbackInTraversingRelationGraph callback)
{
    void** pastParam;
    BitMatrix* pBM;
    void* callbackParam;
    if (NULL != graphs)
    {
        int minID = INT_MAX, maxID = INT_MIN;
        for (map<int, RelationGraphNode*>::iterator iter = graphs->begin(); iter != graphs->end(); iter++)
        {
            RelationGraphNode* curNode = iter->second;
            if (curNode->id > maxID)
            {
                maxID = curNode->id;
            }
            if (curNode->id < minID)
            {
                minID = curNode->id;
            }
        }
        BitMatrix bm = CreateBitMatrix(1, maxID + 1);
        BitMatrixSetAllBits(&bm, 0);
        
        pBM = &bm;
        callbackParam = param;
        
        void* params[2];
        params[0] = pBM;
        params[1] = callbackParam;
        pastParam = params;
    }
    else
    {
        pBM = (BitMatrix*) ((void**)param)[0];
        callbackParam = ((void**)param)[1];
        
        pastParam = (void**) param;
    }
    
    for (list<RelationGraphEdge>::iterator iter = node->edgesFromMe[direction].begin();
         iter != node->edgesFromMe[direction].end(); iter++)
    {
        RelationGraphNode* nextNode = iter->nextNode;
        if (NULL == nextNode) continue;
        if (1 == BitMatrixGet(pBM, 0, nextNode->id)) continue;
        
        BitMatrixSetBit(pBM, 0, nextNode->id, 1);
        if (NULL != callback)
        {
            bool skip = (*callback)(node, *iter, callbackParam);
            if (skip)
            {
                BitMatrixSetBit(pBM, 0, nextNode->id, 0);
            }
            else
            {
                recursiveTraverseRelationGraph(nextNode, direction, NULL, pastParam, callback);
            }
        }
    }
    
}

bool updateRangeBounds (RelationGraphNode* node, RelationGraphEdge edge, void* param)
{
    int direction = *(int*)param;
    RelationGraphNode* nextNode = edge.nextNode;
    
    int newBoundValue = node->rangeBounds[direction] - edge.weight;
    if (NA_RANGE == nextNode->rangeBounds[direction] ||
        (0 == direction && newBoundValue > nextNode->rangeBounds[0]) ||
        (1 == direction && newBoundValue < nextNode->rangeBounds[1]))
    {
        nextNode->rangeBounds[direction] = newBoundValue;
        return false;
    }
    else
    {
        return true;
    }
}

bool decideRangeBounds (RelationGraphNode* node, RelationGraphEdge edge, void* param)
{
    if (node->rangeBounds[1] == node->rangeBounds[0])
    {
        return true;
    }
    else if (node->rangeBounds[0] != NA_RANGE)
    {
        node->rangeBounds[1] = node->rangeBounds[0];
    }
    else if (node->rangeBounds[1] != NA_RANGE)
    {
        node->rangeBounds[0] = node->rangeBounds[1];
    }
    
    int direction = *(int*)param;
    RelationGraphNode* nextNode = edge.nextNode;
    
    int newBoundValue = node->rangeBounds[0] - edge.weight;
    if (NA_RANGE == nextNode->rangeBounds[direction] ||
        (0 == direction && newBoundValue > nextNode->rangeBounds[0]) ||
        (1 == direction && newBoundValue < nextNode->rangeBounds[1]))
    {
        nextNode->rangeBounds[direction] = newBoundValue;
        return false;
    }
    else
    {
        return true;
    }
}
/*
void AlViewRelativeLayout::recursiveUpdateGraphNodes (RelationGraphNode* node, int direction, BitMatrix* stamps)
{
    for (list<RelationGraphEdge>::iterator iter = node->edgesFromMe[direction].begin();
         iter != node->edgesFromMe[direction].end(); iter++)
    {
        RelationGraphNode* nextNode = iter->nextNode;
        if (NULL == nextNode) continue;
        if (1 == BitMatrixGet(stamps, 0, nextNode->id)) continue;
        
        int newBoundValue = node->rangeBounds[direction] - iter->weight;
        if (NA_RANGE == nextNode->rangeBounds[direction] ||
            (0 == direction && newBoundValue > nextNode->rangeBounds[0]) ||
            (1 == direction && newBoundValue < nextNode->rangeBounds[1]))
        {
            nextNode->rangeBounds[direction] = newBoundValue;
            BitMatrixSetBit(stamps, 0, nextNode->id, 1);
            recursiveUpdateGraphNodes(nextNode, direction, stamps);
        }
    }
}
//*/
void AlViewRelativeLayout::solveRelationGraphs (map<int, RelationGraphNode*>& graphs)
{
    //*
    for (map<int, RelationGraphNode*>::iterator iter = graphs.begin(); iter != graphs.end(); iter++)
    {
        // Find one node, at least one of which ranges can be confirmed :
        RelationGraphNode* node = iter->second;
        for (int r=0; r<2; r++)
        {
            if (NA_RANGE != node->rangeBounds[r])
            {
                recursiveTraverseRelationGraph(node, r, &graphs, &r, updateRangeBounds);
            }
        }
        
    }
    
    /*/
    list<RelationGraphNode*>::iterator iter;
    
    int minID = INT_MAX, maxID = INT_MIN;
    for (iter = graphs.begin(); iter != graphs.end(); iter++)
    {
        if ((*iter)->id > maxID)
        {
            maxID = (*iter)->id;
        }
        if ((*iter)->id < minID)
        {
            minID = (*iter)->id;
        }
    }
    BitMatrix bm = CreateBitMatrix(1, maxID + 1);
    
    for (iter = graphs.begin(); iter != graphs.end(); iter++)
    {
        // Find one node, at least one of which ranges can be confirmed :
        RelationGraphNode* node = (*iter);
        for (int r=0; r<2; r++)
        {
            if (NA_RANGE != node->rangeBounds[r])
            {
                BitMatrixSetAllBits(&bm, 0);
                BitMatrixSetBit(&bm, 0, node->id, 1);
                recursiveUpdateGraphNodes(node, r, &bm);
            }
        }
    }
    
    ReleaseBitMatrix(&bm);
    //*/
}

void AlViewRelativeLayout::decideRelationGraphs (map<int, RelationGraphNode*>& graphs)
{
    //*
    for (map<int, RelationGraphNode*>::iterator iter = graphs.begin(); iter != graphs.end(); iter++)
    {
        // Find one node, at least one of which ranges can be confirmed :
        RelationGraphNode* node = iter->second;
        for (int r=0; r<2; r++)
        {
            if (NA_RANGE != node->rangeBounds[r])
            {
                recursiveTraverseRelationGraph(node, r, &graphs, &r, decideRangeBounds);
            }
        }
        
    }
}

void AlViewRelativeLayout::createRelationGraphs (map<int, RelationGraphNode*>& graphs, list<LayoutConstraint>* constraints)
{
    graphs.clear();
    
    int maxVars = 2 * constraints->size();
    RelationGraphNode** nodes = new RelationGraphNode*[maxVars];
    
    for (list<LayoutConstraint>::iterator iter = constraints->begin(); iter != constraints->end(); iter++)
    {
        RelationGraphNode* pLeftNode;
        if (NULL == nodes[iter->leftOperandID])
        {
            pLeftNode = new RelationGraphNode(iter->leftOperandID);
            nodes[iter->leftOperandID] = pLeftNode;
            
            graphs.insert(make_pair(iter->leftOperandID, pLeftNode));
        }
        else
        {
            pLeftNode = nodes[iter->leftOperandID];
        }
        
        RelationGraphNode* pRightNode = NULL;
        if (NA_VAR != iter->rightOperandID)
        {
            if (NULL == nodes[iter->rightOperandID])
            {
                pRightNode = new RelationGraphNode(iter->rightOperandID);
                nodes[iter->rightOperandID] = pRightNode;
                
                graphs.insert(make_pair(iter->rightOperandID, pRightNode));
            }
            else
            {
                pRightNode = nodes[iter->rightOperandID];
            }
            
            RelationGraphEdge edge;
            edge.nextNode = pRightNode;
            edge.weight = iter->constant;
            pLeftNode->edgesFromMe[iter->relation].push_back(edge);
            
            edge.nextNode = pLeftNode;
            edge.weight = -iter->constant;
            pRightNode->edgesFromMe[1 - iter->relation].push_back(edge);
        }
        else
        {
            if (NA_RANGE == pLeftNode->rangeBounds[1 - iter->relation] ||
                (0 == iter->relation && pLeftNode->rangeBounds[1] > iter->constant) ||
                (1 == iter->relation && pLeftNode->rangeBounds[0] < iter->constant))
            {
                pLeftNode->rangeBounds[1 - iter->relation] = iter->constant;
            }
        }
    }
    
    delete[] nodes;
}

